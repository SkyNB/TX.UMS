<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.lnet.ums.mapper.dao.mappers.RoleMapper">
<!--    <cache type="org.mybatis.caches.ehcache.LoggingEhcache">
        <property name="timeToIdleSeconds" value="3600"/>
        <property name="timeToLiveSeconds" value="3600"/>
        <property name="maxEntriesLocalHeap" value="1000"/>
        <property name="maxEntriesLocalDisk" value="10000000"/>
        <property name="memoryStoreEvictionPolicy" value="LRU"/>
    </cache>-->

    <resultMap id="BaseResultMap" type="com.lnet.model.ums.role.Role">
        <id column="ROLE_ID" property="roleId" jdbcType="VARCHAR"/>
        <result column="CODE" property="code" jdbcType="VARCHAR"/>
        <result column="NAME" property="name" jdbcType="VARCHAR"/>
        <result column="IS_ACTIVE" property="active" jdbcType="DECIMAL"/>
        <result column="IS_SYS_ROLE" property="sysRole" jdbcType="DECIMAL"/>
        <result column="REMARK" property="remark" jdbcType="VARCHAR"/>
        <result column="PERMISSION" property="permission" jdbcType="VARCHAR"/>
        <result column="SYSTEM_CODE" property="systemCode" jdbcType="VARCHAR"/>
    </resultMap>
    <sql id="Base_Column_List">
    ROLE_ID, CODE, NAME, IS_ACTIVE, IS_SYS_ROLE, REMARK, PERMISSION, SYSTEM_CODE
  </sql>
    <select id="get" parameterType="java.lang.String" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from role
        where ROLE_ID = #{roleId,jdbcType=VARCHAR}
    </select>

    <select id="exists" resultType="boolean" parameterType="map">
        SELECT CASE WHEN count(*) > 0 THEN 1 ELSE 0 END
        from role
        <where>
            <if test="code != null">
                CODE = #{code,jdbcType=VARCHAR}
            </if>
            <if test="roleId != null">
                AND ROLE_ID != #{roleId,jdbcType=VARCHAR}
            </if>
        </where>
    </select>

    <select id="getAll" resultMap="BaseResultMap" parameterType="java.lang.String">
        select
        <include refid="Base_Column_List"/>
        from role
        WHERE SYSTEM_CODE = #{systemCode,jdbcType=VARCHAR}
    </select>

    <select id="getAvailable" resultMap="BaseResultMap" parameterType="java.lang.String">
        select
        <include refid="Base_Column_List"/>
        from role
        <where>
            IS_ACTIVE = 1
            AND SYSTEM_CODE = #{systemCode,jdbcType=VARCHAR}
        </where>
    </select>

    <select id="getByCode" parameterType="java.lang.String" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from role
        WHERE CODE = #{code,jdbcType=VARCHAR}
    </select>

    <delete id="deleteById" parameterType="java.lang.String">
    delete from role
    where ROLE_ID = #{roleId,jdbcType=VARCHAR}
  </delete>
    <insert id="insert" parameterType="com.lnet.model.ums.role.Role">
   insert into role (ROLE_ID, CODE, NAME,
      IS_ACTIVE, IS_SYS_ROLE, REMARK,
      PERMISSION, SYSTEM_CODE)
    values (#{roleId,jdbcType=VARCHAR}, #{code,jdbcType=VARCHAR}, #{name,jdbcType=VARCHAR},
      #{isActive,jdbcType=DECIMAL}, #{isSysRole,jdbcType=DECIMAL}, #{remark,jdbcType=VARCHAR},
      #{permission,jdbcType=VARCHAR}, #{systemCode,jdbcType=VARCHAR})
  </insert>

    <update id="update" parameterType="com.lnet.model.ums.role.Role">
    update role
    set CODE = #{code,jdbcType=VARCHAR},
      NAME = #{name,jdbcType=VARCHAR},
      IS_ACTIVE = #{isActive,jdbcType=DECIMAL},
      IS_SYS_ROLE = #{isSysRole,jdbcType=DECIMAL},
      REMARK = #{remark,jdbcType=VARCHAR},
      PERMISSION = #{permission,jdbcType=VARCHAR},
      SYSTEM_CODE = #{systemCode,jdbcType=VARCHAR}
    where ROLE_ID = #{roleId,jdbcType=VARCHAR}
  </update>

    <insert id="batchInsert">
        insert into role (<include refid="Base_Column_List"/>)
        (
        <foreach collection="list" item="item" index="index" separator="union all">
            select
            #{item.roleId,jdbcType=VARCHAR},
            #{item.code,jdbcType=VARCHAR},
            #{item.name,jdbcType=VARCHAR},
            #{item.isActive,jdbcType=DECIMAL},
            #{item.isSysRole,jdbcType=DECIMAL},
            #{item.remark,jdbcType=VARCHAR},
            #{item.permission,jdbcType=VARCHAR},
            #{item.systemCode,jdbcType=VARCHAR}
            from dual
        </foreach>
        )
    </insert>

    <update id="activate" parameterType="java.lang.String">
        update role
        set IS_ACTIVE = 1
        where CODE = #{code,jdbcType=VARCHAR}
    </update>

    <update id="inactivate" parameterType="java.lang.String">
        update role
        set IS_ACTIVE = 0
        where CODE = #{code,jdbcType=VARCHAR}
    </update>

    <select id="pageList" resultMap="BaseResultMap">
        SELECT * FROM role
        <where>
            <if test="code != null">
                AND CODE LIKE CONCAT(CONCAT('%', #{code}),'%')
            </if>
            <if test="name != null">
                AND NAME LIKE CONCAT(CONCAT('%', #{name}),'%')
            </if>
        </where>
        <if test="orderBy != null">
            ORDER BY ${orderBy}
        </if>
    </select>
    <select id="page" resultType="com.lnet.model.ums.role.Role">
        SELECT * FROM role
        <where>
            <if test="code != null">
                AND CODE LIKE CONCAT(CONCAT('%', #{code}),'%')
            </if>
            <if test="name != null">
                AND NAME LIKE CONCAT(CONCAT('%', #{name}),'%')
            </if>
        </where>
        <if test="orderBy != null">
            ORDER BY ${orderBy}
        </if>
        limit #{page},#{pageSize}
    </select>
    <select id="getAllCount" resultType="java.lang.Long">
        SELECT count(0) FROM role
        <where>
            <if test="code != null">
                AND CODE LIKE CONCAT(CONCAT('%', #{code}),'%')
            </if>
            <if test="name != null">
                AND NAME LIKE CONCAT(CONCAT('%', #{name}),'%')
            </if>
        </where>
    </select>
</mapper>