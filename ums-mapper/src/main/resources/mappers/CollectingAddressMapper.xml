<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.lnet.ums.mapper.dao.mappers.CollectingAddressMapper">

    <cache type="org.mybatis.caches.ehcache.LoggingEhcache">
        <property name="timeToIdleSeconds" value="3600"/>
        <property name="timeToLiveSeconds" value="3600"/>
        <property name="maxEntriesLocalHeap" value="1000"/>
        <property name="maxEntriesLocalDisk" value="10000000"/>
        <property name="memoryStoreEvictionPolicy" value="LRU"/>
    </cache>

    <resultMap id="BaseResultMap" type="com.lnet.model.ums.customer.customerEntity.CollectingAddress">
        <id column="COLLECTING_ADDRESS_ID" property="collectingAddressId" jdbcType="VARCHAR"/>
        <result column="OWNER_CODE" property="ownerCode" jdbcType="VARCHAR"/>
        <result column="CODE" property="code" jdbcType="VARCHAR"/>
        <result column="NAME" property="name" jdbcType="VARCHAR"/>
        <result column="TYPE" property="type" jdbcType="VARCHAR"/>
        <result column="CONTACT_MAN" property="contactMan" jdbcType="VARCHAR"/>
        <result column="TELEPHONE_NO" property="telephoneNo" jdbcType="VARCHAR"/>
        <result column="MOBILE_PHONE_NO" property="mobilePhoneNo" jdbcType="VARCHAR"/>
        <result column="PROVINCE" property="province" jdbcType="VARCHAR"/>
        <result column="CITY" property="city" jdbcType="VARCHAR"/>
        <result column="AREA" property="area" jdbcType="VARCHAR"/>
        <result column="STREET" property="street" jdbcType="VARCHAR"/>
        <result column="DISTRICT_CODE" property="districtCode" jdbcType="VARCHAR"/>
        <result column="ADDRESS" property="address" jdbcType="VARCHAR"/>
        <result column="IS_ACTIVE" property="isActive" jdbcType="DECIMAL"/>
        <result column="REMARK" property="remark" jdbcType="VARCHAR"/>
    </resultMap>

    <sql id="Base_Column_List">
        COLLECTING_ADDRESS_ID, OWNER_CODE, CODE, NAME, TYPE, CONTACT_MAN, TELEPHONE_NO, MOBILE_PHONE_NO,
        PROVINCE, CITY, AREA, STREET, DISTRICT_CODE, ADDRESS, IS_ACTIVE, REMARK
    </sql>

    <select id="exists" resultType="boolean">
        SELECT CASE WHEN COUNT(*) > 0 THEN 1 ELSE 0 END
        FROM COLLECTING_ADDRESS
        <where>
            <if test="code != null">
                CODE = #{code, jdbcType=VARCHAR}
            </if>
            <if test="ownerCode != null">
                AND OWNER_CODE = #{ownerCode, jdbcType=VARCHAR}
            </if>
            <if test="collectingAddressId != null">
                AND COLLECTING_ADDRESS_ID != #{collectingAddressId, jdbcType=VARCHAR}
            </if>
        </where>
    </select>

    <insert id="insert" parameterType="com.lnet.model.ums.customer.customerEntity.CollectingAddress">
        INSERT INTO COLLECTING_ADDRESS (COLLECTING_ADDRESS_ID, OWNER_CODE, CODE,
        NAME, TYPE, CONTACT_MAN,
        TELEPHONE_NO, MOBILE_PHONE_NO, PROVINCE,
        CITY, AREA, STREET,
        DISTRICT_CODE, ADDRESS, IS_ACTIVE,
        REMARK)
        VALUES (#{collectingAddressId,jdbcType=VARCHAR}, #{ownerCode,jdbcType=VARCHAR}, #{code,jdbcType=VARCHAR},
        #{name,jdbcType=VARCHAR}, #{type,jdbcType=VARCHAR}, #{contactMan,jdbcType=VARCHAR},
        #{telephoneNo,jdbcType=VARCHAR}, #{mobilePhoneNo,jdbcType=VARCHAR}, #{province,jdbcType=VARCHAR},
        #{city,jdbcType=VARCHAR}, #{area,jdbcType=VARCHAR}, #{street,jdbcType=VARCHAR},
        #{districtCode,jdbcType=VARCHAR}, #{address,jdbcType=VARCHAR}, #{isActive,jdbcType=DECIMAL},
        #{remark,jdbcType=VARCHAR})
    </insert>

    <insert id="batchInsert" parameterType="com.lnet.model.ums.customer.customerEntity.CollectingAddress">
        MERGE INTO COLLECTING_ADDRESS s USING
        (
          <foreach collection="list" item="item" index="index" separator="union">
              SELECT
              #{item.collectingAddressId,jdbcType=VARCHAR} collectingAddressId,
              #{item.ownerCode,jdbcType=VARCHAR} ownerCode,
              #{item.code,jdbcType=VARCHAR} code,
              #{item.name,jdbcType=VARCHAR} name,
              #{item.type,jdbcType=VARCHAR} type,
              #{item.contactMan,jdbcType=VARCHAR} contactMan,
              #{item.telephoneNo,jdbcType=VARCHAR} telephoneNo,
              #{item.mobilePhoneNo,jdbcType=VARCHAR} mobilePhoneNo,
              #{item.province,jdbcType=VARCHAR} province,
              #{item.city,jdbcType=VARCHAR} city,
              #{item.area,jdbcType=VARCHAR} area,
              #{item.street,jdbcType=VARCHAR} street,
              #{item.districtCode,jdbcType=VARCHAR} districtCode,
              #{item.address,jdbcType=VARCHAR} address,
              #{item.isActive,jdbcType=DECIMAL} isActive,
              #{item.remark,jdbcType=VARCHAR} remark
              FROM DUAL
          </foreach>
        ) temp
        ON
        (
          UPPER(s.CODE) = UPPER(temp.code) AND UPPER(s.OWNER_CODE) = UPPER(temp.ownerCode)
        )
        WHEN MATCHED THEN UPDATE SET
          s.NAME = temp.name,
          s.TYPE = temp.type,
          s.CONTACT_MAN = temp.contactMan,
          s.TELEPHONE_NO = temp.telephoneNo,
          s.MOBILE_PHONE_NO = temp.mobilePhoneNo,
          s.PROVINCE = temp.province,
          s.CITY = temp.city,
          s.AREA = temp.area,
          s.STREET = temp.street,
          s.DISTRICT_CODE = temp.districtCode,
          s.ADDRESS = temp.address,
          s.REMARK = temp.remark
        WHEN NOT MATCHED THEN INSERT (<include refid="Base_Column_List"/>)
        VALUES
        (
          temp.collectingAddressId,
          temp.ownerCode,
          temp.code,
          temp.name,
          temp.type,
          temp.contactMan,
          temp.telephoneNo,
          temp.mobilePhoneNo,
          temp.province,
          temp.city,
          temp.area,
          temp.street,
          temp.districtCode,
          temp.address,
          temp.isActive,
          temp.remark
        )
    </insert>

    <update id="update" parameterType="com.lnet.model.ums.customer.customerEntity.CollectingAddress">
        UPDATE COLLECTING_ADDRESS SET
        NAME = #{name, jdbcType=VARCHAR},
        TYPE = #{type,jdbcType=VARCHAR},
        CONTACT_MAN = #{contactMan,jdbcType=VARCHAR},
        TELEPHONE_NO = #{telephoneNo,jdbcType=VARCHAR},
        MOBILE_PHONE_NO = #{mobilePhoneNo,jdbcType=VARCHAR},
        PROVINCE = #{province,jdbcType=VARCHAR},
        CITY = #{city,jdbcType=VARCHAR},
        AREA = #{area,jdbcType=VARCHAR},
        STREET = #{street,jdbcType=VARCHAR},
        DISTRICT_CODE = #{districtCode,jdbcType=VARCHAR},
        ADDRESS = #{address,jdbcType=VARCHAR},
        IS_ACTIVE = #{isActive,jdbcType=DECIMAL},
        REMARK = #{remark,jdbcType=VARCHAR}
        WHERE COLLECTING_ADDRESS_ID = #{collectingAddressId,jdbcType=VARCHAR}
    </update>

    <select id="getAll" resultMap="BaseResultMap">
        SELECT <include refid="Base_Column_List"/> FROM COLLECTING_ADDRESS
    </select>

    <select id="getAvailable" resultMap="BaseResultMap">
        SELECT <include refid="Base_Column_List"/> FROM COLLECTING_ADDRESS WHERE IS_ACTIVE=1
    </select>

    <select id="get" resultMap="BaseResultMap">
        SELECT <include refid="Base_Column_List"/> FROM COLLECTING_ADDRESS WHERE COLLECTING_ADDRESS_ID=#{collectingAddressId,jdbcType=VARCHAR}
    </select>

    <select id="getByCode" resultMap="BaseResultMap">
        SELECT <include refid="Base_Column_List"/> FROM COLLECTING_ADDRESS WHERE CODE=#{code,jdbcType=VARCHAR}
    </select>

    <select id="getByOwnerCode" parameterType="string" resultMap="BaseResultMap">
        SELECT <include refid="Base_Column_List"/> FROM COLLECTING_ADDRESS WHERE OWNER_CODE=#{ownerCode,jdbcType=VARCHAR} AND IS_ACTIVE = 1
    </select>

    <update id="activate" parameterType="string">
        UPDATE COLLECTING_ADDRESS SET IS_ACTIVE=1 WHERE CODE=#{code,jdbcType=VARCHAR}
    </update>

    <update id="inactivate" parameterType="string">
        UPDATE COLLECTING_ADDRESS SET IS_ACTIVE=0 WHERE CODE=#{code,jdbcType=VARCHAR}
    </update>

    <select id="pageList" resultMap="BaseResultMap" parameterType="map">
        SELECT <include refid="Base_Column_List"/> FROM COLLECTING_ADDRESS
        <where>
            <if test="code != null">
                CODE LIKE CONCAT(CONCAT('%', #{code}), '%')
            </if>
            <if test="name != null">
                AND NAME LIKE CONCAT(CONCAT('%', #{name}), '%')
            </if>
            <if test="contactMan != null">
                AND CONTACT_MAN LIKE CONCAT(CONCAT('%', #{contactMan}), '%')
            </if>
            <if test="province != null">
                AND PROVINCE LIKE CONCAT(CONCAT('%', #{province}), '%')
            </if>
            <if test="city != null">
                AND CITY LIKE CONCAT(CONCAT('%', #{city}), '%')
            </if>
            <if test="ownerCode != null">
                AND OWNER_CODE=#{ownerCode}
            </if>
            <if test="type != null">
                AND TYPE=#{type}
            </if>
        </where>
        <if test="orderBy != null">
            ORDER BY ${orderBy}
        </if>
    </select>
</mapper>